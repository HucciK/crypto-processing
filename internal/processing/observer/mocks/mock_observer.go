// Code generated by MockGen. DO NOT EDIT.
// Source: internal/processing/observer/observer.go
//
// Generated by this command:
//
//	mockgen -source=internal/processing/observer/observer.go -destination=internal/processing/observer/mocks/mock_observer.go
//
// Package mock_observer is a generated GoMock package.
package mock_observer

import (
	reflect "reflect"

	core "github.com/HucciK/crypto-processing/internal/core"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockClient) Call(params core.CallParams) (*core.CallResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", params)
	ret0, _ := ret[0].(*core.CallResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockClientMockRecorder) Call(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClient)(nil).Call), params)
}
